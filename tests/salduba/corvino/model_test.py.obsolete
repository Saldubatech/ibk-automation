from typing import Optional, Tuple
import logging
import logging.config
import unittest
import tempfile
import os

import pandas as pd

from salduba.corvino.parse_input import InputParser
from salduba.corvino.movements import Movement, MovementBatch, MovementStatus
from salduba.corvino.persistence.movement_record import MovementRepo, MovementRecord
from salduba.ib_tws_proxy.backing_db.db import TradingDB, DbConfig
from salduba.ib_tws_proxy.contracts.contract_repo import ContractRepo, DeltaNeutralContractRepo
from salduba.ib_tws_proxy.domain.enumerations import SecType, Currency, Exchange, Country
from salduba.ib_tws_proxy.orders.OrderRepo import OrderRepo, OrderStatusRepo, SoftDollarTierRepo
from salduba.util.files import resolveFile, resolveDir
from salduba.util.logging import init_logging

expected_db_version = 1

init_logging()
_logger = logging.getLogger(__name__)


class TestMovementModel(unittest.TestCase):
  """Test the basic functionality of the Movement Model"""

  def __init__(self, *args, **kwargs) -> None:  # type: ignore
    _logger.info(f"Executing in {os.getcwd()}")
    super().__init__(*args, **kwargs)  # type: ignore
    self.db: Optional[TradingDB] = None

  def _fresh_local_db(self) -> TradingDB:
    if not self.db:
      temp = tempfile.NamedTemporaryFile()
      temp.close()
      schemata = resolveDir('salduba/ib_tws_proxy/backing_db/schema')
      seed_data = resolveDir('salduba/ib_tws_proxy/backing_db/seed-data')
      if schemata and seed_data:
        local_config = DbConfig({
          'path': temp.name,
          'schemas': schemata,
          'seed_data': seed_data,
          'expected_version': "0",
          'target_version': "1",
          'version_date': "2024-02-01 00:00:00.000"
        }
        )
        _logger.info(f"Using File for DB: {temp.name}")
        db = TradingDB(local_config)
        v = db.ensure_version(expected_db_version)
        self.db = db
      else:
        msg = f"Could not find Schemas or Seed Data directories"
        _logger.error(msg)
        raise Exception(msg)
    return self.db

  def test_basic_construction(self) -> None:
    underTest = Movement(
      MovementStatus.NEW,
      'test_batch',
      'test_ticker',
      33,
      'test_name',
      'test_symbol',
      'test_raw_type',
      Country.US,
      SecType.STK,
      Currency.JPY,
      Exchange.ISLAND,
      Exchange.NYSE,
      contract_key='a_contract_key',
      order_key='an_order_key'
    )
    assert underTest.ticker == 'test_ticker'

  def _repos(self, db: TradingDB) -> Tuple[ContractRepo, OrderRepo, MovementRepo]:
    dncRepo = DeltaNeutralContractRepo(db)
    c_repo = ContractRepo(db, dncRepo)
    sdTiRepo = SoftDollarTierRepo(db)
    orderStRepo = OrderStatusRepo(db)
    o_repo = OrderRepo(db, sdTiRepo, orderStRepo)
    m_repo = MovementRepo(db, c_repo, o_repo)
    return c_repo, o_repo, m_repo

  def _from_file(self) -> pd.DataFrame:
    datafile = resolveFile("data/cervino_rebalance_v2.csv")

    if datafile:
      with open(datafile) as f:
        # count all lines in f
        lines = f.readlines()

      df = InputParser.read_csv(datafile)
      assert len(df) == len(lines) - 1
      return df
    else:
      msg = f"Could not find data file: {datafile}"
      _logger.error(msg)
      raise Exception(msg)


  def test_persistence(self) -> None:
    db = self._fresh_local_db()
    _, _, m_repo = self._repos(db)

    underTest: pd.DataFrame = self._from_file()
    howMany = len(underTest)
    m_repo.persist(m_repo)
    persisted = m_repo.count(['test_batch'], MovementRecord.batchClause)
    assert persisted == howMany, f"Expected {howMany} movements, got {persisted}"
    underTest.fromRepo(m_repo, 'test_batch')
    assert len(underTest.movements) == howMany, f"Expected {howMany} movements, got {len(underTest.movements)}"

if __name__ == '__main__':
    unittest.main()
